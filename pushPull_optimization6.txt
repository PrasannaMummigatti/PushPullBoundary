import numpy as np
import matplotlib.pyplot as plt
#import pandas as pd



# --- Bakery Product Setup ---
products = ["Croissant", "Bread Loaf", "Strawberry Cake", "Gluten-Free Muffin", "Custom Celebration Cake"]
#products = ["Croissant", "Bread Loaf", "Strawberry Cake", "Custom Celebration Cake"]

n_products = len(products)
n_periods = 50
np.random.seed(42)

avg_demand = np.array([120, 100, 80, 50, 40])
std_demand = np.array([20, 15, 30, 25, 35])
#avg_demand = np.array([120, 100, 80, 40])
#std_demand = np.array([20, 15, 30, 35])


holding_cost = 2.0
stockout_cost = 5.0
boundary_levels = np.linspace(0, 1, 21)
#pd.DataFrame(boundary_levels, columns=["Boundary Level"]).to_csv("boundary_levels.csv", index=False)
# --- Simulation Function ---
def simulate_product_costs(mean_d, std_d):
    results = []
    for boundary_level in boundary_levels:
        total_holding = 0
        total_stockout = 0
        demand_series = np.random.normal(mean_d, std_d, n_periods).clip(min=0).astype(int)
        #pd.DataFrame(demand_series, columns=["Demand"]).to_csv(f"demand_{mean_d}_{std_d}.csv", index=False)

        push_qty = int(mean_d * boundary_level)
        pull_capacity = int(mean_d * (1 - boundary_level))
        result_d=0

        for d in demand_series:
            
            push_fulfilled = min(push_qty, d)
            holding = max(push_qty - d, 0)

            residual_demand = d - push_fulfilled
            pull_fulfilled = min(pull_capacity, residual_demand)

            stockout = max(residual_demand - pull_fulfilled, 0)

            total_holding += holding_cost * holding
            total_stockout += stockout_cost * stockout

        total_cost = total_holding + total_stockout

        results.append((total_cost, total_holding, total_stockout))
        with_demand=[a+(b,) for a,b in zip(results, demand_series)]

    return results,with_demand


# --- Plotting Simulation + Push-Pull Breakdown ---
fig, axs = plt.subplots(n_products, 2, figsize=(14, 4.2 * n_products), gridspec_kw={'width_ratios': [1.2, 1]})
fig.set_figheight(4.5)
for i in range(n_products):
    mean_d = avg_demand[i]
    std_d = std_demand[i]
    results,r_withDe = simulate_product_costs(mean_d, std_d)
    #pd.DataFrame(r_withDe, columns=["Total Cost", "Holding Cost", "Stockout Cost", "Demand"]).to_csv(f"{products[i]}_costs.csv", index=False)

    total_costs = [r[0] for r in results]
    hold_costs = [r[1] for r in results]
    stock_costs = [r[2] for r in results]

    min_idx = np.argmin(total_costs)
    opt_boundary = boundary_levels[min_idx]
    opt_cost = total_costs[min_idx]
    push_qty = int(mean_d * opt_boundary)
    pull_qty = mean_d - push_qty

    # --- Left Plot: Cost vs Boundary ---
    ax_left = axs[i, 0]
    ax_left.plot(boundary_levels, total_costs, label="Total Cost", marker='o')
    ax_left.plot(boundary_levels, hold_costs, label="Holding Cost", linestyle='--')
    ax_left.plot(boundary_levels, stock_costs, label="Stockout Cost", linestyle='--')
    ax_left.axvline(opt_boundary, color='gray', linestyle=':', label="Optimal Boundary")
    ax_left.scatter(opt_boundary, opt_cost, color='red', zorder=5,label="Optimal Point")
    ax_left.set_title(f"{products[i]} | Demand Mean={mean_d}, Std={std_d} | Opt={opt_boundary:.2f} → Push={push_qty}, Pull={pull_qty}, Holding Cost={holding_cost}, Stockout Cost={stockout_cost}", fontsize=9, fontweight='bold')
    #ax_left.set_xlabel("Push–Pull Boundary")
    #ax_left.set_yticks(np.arange(0, max(total_costs), 3))
    ax_left.set_ylabel("Cost")
    #ax_left.grid(True)
    ax_left.set_xticks([])
    ax_left.set_yticks([])
    #ax_left.set_ylim(0, max(total_costs) + 5)
    ax_left.spines['top'].set_visible(False)
    ax_left.spines['right'].set_visible(False)
    ax_left.spines['left'].set_visible(False)
    ax_left.spines['bottom'].set_visible(True) # Hide unnecessary spines
    

    if i == 0:
        ax_left.legend(loc="lower right", fontsize=8,frameon=True,facecolor='white', edgecolor='none',framealpha=1)

    # --- Right Plot: Push vs Pull Bar ---
    ax_right = axs[i, 1]
    ax_right.barh([0], [push_qty], color='lightblue', label="Push (Pre-bake)")
    ax_right.barh([0], [pull_qty], left=[push_qty], color='salmon', label="Pull (Customize)")
    ax_right.set_xlim(0, mean_d + 20)
    ax_right.set_yticks([0])
    ax_right.set_yticklabels([""])
    #ax_right.set_title("Daily Quantity Plan", fontsize=5)
    if i==0:
        ax_right.set_title("Daily Quantity Plan", fontsize=9, fontweight='bold')
    #ax_right.set_xlabel("Units per Day")
    ax_right.bar_label(ax_right.containers[0], fmt='%d', label_type='center', color='black')
    ax_right.bar_label(ax_right.containers[1], fmt='%d', label_type='center', color='black')
    ax_right.grid(False)
    ax_right.spines['top'].set_visible(False)
    ax_right.spines['left'].set_visible(False)
    ax_right.spines['bottom'].set_visible(False)
    ax_right.spines['right'].set_visible(False)
    ax_right.set_yticks([])
    ax_right.set_xticks([])
    

    if i == 0:
        ax_right.legend(loc="upper right", fontsize=8,frameon=True,facecolor='white', edgecolor='none',framealpha=1)
        
#plt.text(0.0, 0.0, "Push-Pull Optimization: Bakery Products", fontsize=2, ha='center', transform=fig.transFigure)
plt.tight_layout()
plt.show()

